/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include "platform.h"
#include "xgpio.h"
#include "xparameters.h"

#define KEY_1 0x01
#define KEY_2 0x02
#define KEY_3 0x03
#define KEY_4 0x04
#define KEY_5 0x05
#define KEY_6 0x06
#define KEY_7 0x07
#define KEY_8 0x08

void print(char *str);

int main()
{
    init_platform();
    setbuf(stdout, NULL);

    XGpio KEYPAD;

    XGpio_Initialize(&KEYPAD, XPAR_KEYPAD_8BIT_DEVICE_ID);
    XGpio_SetDataDirection(&KEYPAD, KEY_1, 1);
    XGpio_SetDataDirection(&KEYPAD, KEY_2, 1);
    XGpio_SetDataDirection(&KEYPAD, KEY_3, 1);
    XGpio_SetDataDirection(&KEYPAD, KEY_4, 1);
    XGpio_SetDataDirection(&KEYPAD, KEY_5, 1);
    XGpio_SetDataDirection(&KEYPAD, KEY_6, 1);
    XGpio_SetDataDirection(&KEYPAD, KEY_7, 1);
    XGpio_SetDataDirection(&KEYPAD, KEY_8, 1);

    while(1) {
    	u32 gpio_val_1 = XGpio_DiscreteRead(&KEYPAD, KEY_1);
    	u32 gpio_val_2 = XGpio_DiscreteRead(&KEYPAD, KEY_2);
    	//u32 gpio_val_3 = XGpio_DiscreteRead(&KEYPAD, KEY_3);
    	//u32 gpio_val_4 = XGpio_DiscreteRead(&KEYPAD, KEY_4);
    	//u32 gpio_val_5 = XGpio_DiscreteRead(&KEYPAD, KEY_5);
    	//u32 gpio_val_6 = XGpio_DiscreteRead(&KEYPAD, KEY_6);
    	//u32 gpio_val_7 = XGpio_DiscreteRead(&KEYPAD, KEY_7);
    	//u32 gpio_val_8 = XGpio_DiscreteRead(&KEYPAD, KEY_8);

    	char thing[50];

    	sprintf(thing, "%d %d",
    			gpio_val_1,
    			gpio_val_2/*,
    			gpio_val_3,
    			gpio_val_4,
    			gpio_val_5,
    			gpio_val_6,
    			gpio_val_7,
    			gpio_val_8*/);

    	print(thing);
    	print("\n\r");

    	/*
    	counter++;

    	char thing[20];

    	sprintf(thing, "%c : %d", on ? '1' : '0', counter);

    	print(thing);
    	print("\n\r");

    	if (counter%200 == 0) {
    		if (on) {
    			XGpio_DiscreteClear(&LED, 1, LED_1);
    			on = false;
    		}
    		else {
    			XGpio_DiscreteWrite(&LED, 1, LED_1);
    			on = true;
    		}
    	}
    	*/
    }

    return 0;
}
