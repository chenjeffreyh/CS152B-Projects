/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include "platform.h"
#include "xgpio.h"
#include "xparameters.h"

#define CHANNEL 1

#define ROW_1 0x01
#define KEY_2 0x02
#define KEY_3 0x04
#define KEY_4 0x08
#define KEY_5 0x10
#define KEY_6 0x20
#define KEY_7 0x40
#define KEY_8 0x80

#define A_KEY 0x0

void print(char *str);

enum rps_types {
	ROCK,
	PAPER,
	SCISSOR
} rps_t;

int main()
{
    init_platform();
    setbuf(stdout, NULL);

    XGpio KEYPAD;

    XGpio_Initialize(&KEYPAD, XPAR_KEYPAD_8BIT_DEVICE_ID);
    XGpio_SetDataDirection(&KEYPAD, CHANNEL, 0xFF);
    //XGpio_SetDataDirection(&KEYPAD, KEY_3, 1);
    //XGpio_SetDataDirection(&KEYPAD, KEY_4, 1);
    //XGpio_SetDataDirection(&KEYPAD, KEY_5, 1);
    //XGpio_SetDataDirection(&KEYPAD, KEY_6, 1);
    //XGpio_SetDataDirection(&KEYPAD, KEY_7, 1);
    //XGpio_SetDataDirection(&KEYPAD, KEY_8, 1);

    while(1) {
    	print("\n\rRock, paper, scissors, go!!!!\n\r");

    	bool fpga_cast = false;
    	bool comp_cast = false;

    	enum fpga_move;
    	enum comp_move;

    	while (!(fpga_cast & comp_cast)) {
    		if (!fpga_cast) {
    			u32 move = XGpio_DiscreteRead(&KEYPAD, CHANNEL);

    			switch(move) {
    			case 0x1F:
    				fpga_move = ROCK;
    				fpga_cast = true;
    				break;

    			case 0x2F:
    				fpga_move = rps_types.PAPER;
    				fpga_cast = true;
    				break;

    			case 0x4F:
    				fpga_move = rps_t.SCISSOR;
    				fpga_cast = true;
    				break;

    			default:
    				break;
    			}
    		}

    		if (!comp_cast) {
    			char c_move = getchar();

    			switch(c_move) {
    			case '1':
    				comp_move = rps_t.ROCK;
    				comp_cast = true;
    				break;

    			case '2':
    				comp_move = rps_t.PAPER;
    				comp_cast = true;
    				break;

    			case '3':
    				comp_move = rps_t.SCISSOR;
    				comp_cast = true;
    				break;

    			default:
    				break;
    			}
    		}
    	}

    	if (fpga_move == comp_move) {
    		print("A draw!\n\r");
    		continue;
    	}

    	char statement[100];

    	switch (fpga_move) {
    	case rps_t.ROCK:
    		sprintf(statement, "%s\n\r",
    				(comp_move == rps_t.PAPER) ? "Computer wins! Paper > Rock" :
    											 "FPGA wins! Rock > Scissors");
    		break;

    	case rps_t.PAPER:
    		sprintf(statement, "%s\n\r",
    				(comp_move == rps_t.ROCK) ? "FPGA wins! Paper > Rock" :
    											"Computer wins! Rock > Scissors");
    		break;

    	case rps_t.SCISSOR:
    		sprintf(statement, "%s\n\r",
    				(comp_move == rps_t.ROCK) ? "Computer wins! Rock > Scissors" :
    											"FPGA wins! Scissors > Paper");
    		break;

    	default:
    		print("I don't know wtf happened how did you get here.\n\r");
    		break;
    	}

    	print(statement);
    }

    return 0;
}
