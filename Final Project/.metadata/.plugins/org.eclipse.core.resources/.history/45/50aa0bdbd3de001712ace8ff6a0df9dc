#include <stdint.h>
#include <stdlib.h>

#include "globals.h"

#ifndef MAZE_SYSTEM_H
#define MAZE_SYSTEM_H

/**
 * Enumeration of the possible maze directions.
 */
typedef enum {
	/*
	 * Moving upwards.
	 */
	UP,

	/*
	 * Moving straight.
	 */
	STRAIGHT,

	/*
	 * Moving downwards.
	 */
	DOWN
} MAZE_DIR;

/**
 * A full description of the maze in a single column.
 */
typedef struct col_def {
	/*
	 * The upper bound y-coordinate (actually a lower number).
	 */
	uint16_t upper_bound;

	/*
	 * The lower bound y-coordinate.
	 */
	uint16_t lower_bound;

	/*
	 * The current direction of the maze.
	 */
	MAZE_DIR maze_direction;
} COL_DEF;

/**
 * Generates an appropriate new maze column given a maze column.
 */
COL_DEF generate_col_def(COL_DEF cur_col) {
	MAZE_DIR new_dir;
	uint16_t new_upper;
	uint16_t new_lower;

	switch(rand() % 3) {
	case 0:
		new_dir = UP;
		new_upper = cur_col.upper_bound - 1;
		new_lower = cur_col.lower_bound - 1;
		break;
	case 1:
		new_dir = STRAIGHT;
		new_upper = cur_col.upper_bound;
		new_lower = cur_col.lower_bound;
		break;
	case 2:
		new_dir = DOWN;
		new_upper = cur_col.upper_bound + 1;
		new_lower = cur_col.lower_bound + 1;
		break;
	default:
		break;
	}

	/*
	 * Cap the bounds if they are about to run off the screen.
	 */
	if (new_upper < SCREEN_TOP_EDGE ||
		new_lower > SCREEN_BOT_EDGE) {
		new_upper = cur_col.upper_bound;
		new_lower = cur_col.lower_bound;
	}

	/*
	 * Create the new column definition.
	 */
	COL_DEF new_col_def = {.maze_direction = new_dir,
			               .upper_bound = new_upper,
			               .lower_bound = new_lower};

	return new_col_def;
}

#endif
