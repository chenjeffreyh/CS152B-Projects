#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <xil_exception.h>
#include <xintc.h>
#include <xio.h>

#include "xgpio.h"
#include "xparameters.h"
#include "xtmrctr.h"
#include "game_system.h"
#include "globals.h"
#include "graphic_system.h"
//#include "mb_interface.h"
//#include "vmodcam_header.h"

static XGpio ENC_SIG_A;
static XGpio ENC_SIG_B;
static XGpio BUTTON;
static XIntc myIntc;
static XTmrCtr timer;
static int new_offset = 0;

static GAME game;

int SetupInterrupts();

int main() {
	u32 lDvmaBaseAddress = XPAR_DVMA_0_BASEADDR;
	uint16_t posX, posY;
	
	uint32_t offset = 0;
	char message[200];

	XIo_Out32(lDvmaBaseAddress + blDvmaHSR, 40); // hsync
	XIo_Out32(lDvmaBaseAddress + blDvmaHBPR, 260); // hbpr
	XIo_Out32(lDvmaBaseAddress + blDvmaHFPR, 1540); // hfpr
	XIo_Out32(lDvmaBaseAddress + blDvmaHTR, 1650); // htr
	XIo_Out32(lDvmaBaseAddress + blDvmaVSR, 5); // vsync
	XIo_Out32(lDvmaBaseAddress + blDvmaVBPR, 25); // vbpr
	XIo_Out32(lDvmaBaseAddress + blDvmaVFPR, 745); // vfpr
	XIo_Out32(lDvmaBaseAddress + blDvmaVTR, 750); // vtr

	XIo_Out32(lDvmaBaseAddress + blDvmaFWR, 0x00000500); // frame width
	XIo_Out32(lDvmaBaseAddress + blDvmaFHR, 0x000002D0); // frame height

	XIo_Out32(lDvmaBaseAddress + blDvmaFBAR, XPAR_DDR2_SDRAM_MPMC_BASEADDR); // frame base addr
	XIo_Out32(lDvmaBaseAddress + blDvmaFLSR, 0x00000A00); // frame line stride
	XIo_Out32(lDvmaBaseAddress + blDvmaCR, 0x00000003); // dvma enable, dfl enable

	/*
	 * Clear SDRAM first and make the screen black.
	 */
	for(posY = 0; posY < 720; posY++) {
		for(posX = 0; posX < 1280; posX++) {
			XIo_Out16(XPAR_DDR2_SDRAM_MPMC_BASEADDR + ((offset + posX) << 1), BLACK);
		}
		offset += 2560;
	}

	/*
	 * Initialize the GPIO for the encoder and the push button.
	 */
	XGpio_Initialize(&ENC_SIG_A, XPAR_ENC_SIG_A_DEVICE_ID);
	XGpio_Initialize(&ENC_SIG_B, XPAR_ENC_SIG_B_DEVICE_ID);
	XGpio_Initialize(&BUTTON, XPAR_BUTTON_DEVICE_ID);

	XGpio_SetDataDirection(&ENC_SIG_A, 1, 0xFF);
	XGpio_SetDataDirection(&ENC_SIG_B, 1, 0xFF);
	XGpio_SetDataDirection(&BUTTON, 1, 0x1);

	/*
	 * Initialize system timer.
	 */
	XTmrCtr_Initialize(&timer, XPAR_TMRCTR_0_DEVICE_ID);

	/*
	 * Set up the interrupt system for reading the encoders.
	 */
	SetupInterrupts();
	microblaze_enable_interrupts();

	/*
	 * Welcome message
	 */
	//sprintf(message, "%s\n\r", "Welcome to MazeRunner! To start the game, press the button.");
	//while(!XGpio_DiscreteRead(&BUTTON, 1)) {}

	/*
	 * Infinite game loop
	 */
	while(1) {
		/*
		 * Initialize the game
		 */
		initialize_game(&game);

		offset = SCREEN_TOP_EDGE * 2560;

		for (posY = SCREEN_TOP_EDGE; posY < SCREEN_BOT_EDGE; posY++) {
			for (posX = SCREEN_LEFT_EDGE; posX < SCREEN_RIGHT_EDGE; posX++) {
				XIo_Out16(XPAR_DDR2_SDRAM_MPMC_BASEADDR + ((offset + posX) << 1), WHITE);
			}
			offset += 2560;
		}

		uint16_t maze_index = game.maze_front;
		for (posX = SCREEN_LEFT_EDGE; posX < SCREEN_RIGHT_EDGE; posX++) {
			XIo_Out16(XPAR_DDR2_SDRAM_MPMC_BASEADDR +
					(((uint32_t)(game.maze[maze_index].upper_bound + SCREEN_TOP_EDGE)*2560 + posX) << 1), BLACK);
			XIo_Out16(XPAR_DDR2_SDRAM_MPMC_BASEADDR +
					(((uint32_t)(game.maze[maze_index].lower_bound + SCREEN_TOP_EDGE)*2560 + posX) << 1), BLACK);

			maze_index++;
		}

		int last_pos = new_offset;
		XTmrCtr_Start(&timer, 0);
		while (!game.game_over) {

			/*
			 * Restart the timer.
			 */
			XTmrCtr_Reset(&timer, 0);
			XTmrCtr_Start(&timer, 0);

			/*
			 * Propagate the game state.
			 */
			propagate_game(&game, new_offset - last_pos);
			last_pos = new_offset;

			//sprintf(message, "%s%d%s%d\n\r", "New bounds are: ", game.maze[game.maze_back].upper_bound, " and ", game.maze[game.maze_back].lower_bound);
			//print(message);

			/*
			 * Erase the last maze configuration.
			 */
			maze_index = game.maze_back;
			for (posX = SCREEN_LEFT_EDGE; posX < SCREEN_RIGHT_EDGE; posX++) {
				XIo_Out16(XPAR_DDR2_SDRAM_MPMC_BASEADDR +
						((((uint32_t)(game.maze[maze_index].upper_bound + SCREEN_TOP_EDGE))*2560 + posX) << 1), 0xFFF);
				XIo_Out16(XPAR_DDR2_SDRAM_MPMC_BASEADDR +
						((((uint32_t)(game.maze[maze_index].upper_bound - 1 + SCREEN_TOP_EDGE))*2560 + posX) << 1), 0xFFF);
				XIo_Out16(XPAR_DDR2_SDRAM_MPMC_BASEADDR +
						((((uint32_t)(game.maze[maze_index].lower_bound + SCREEN_TOP_EDGE))*2560 + posX) << 1), 0xFFF);
				XIo_Out16(XPAR_DDR2_SDRAM_MPMC_BASEADDR +
						((((uint32_t)(game.maze[maze_index].lower_bound + 1 + SCREEN_TOP_EDGE))*2560 + posX) << 1), 0xFFF);

				maze_index = (maze_index + 1) % GRAPHIC_WIDTH;
			}

			/*
			 * Clear the player symbol.
			 */
			int player_coord_x, player_coord_y;
			for (player_coord_x = -PLAYER_SYMBOL_RADIUS; player_coord_x <= PLAYER_SYMBOL_RADIUS; player_coord_x++) {
				for (player_coord_y = -PLAYER_SYMBOL_RADIUS; player_coord_y <= PLAYER_SYMBOL_RADIUS; player_coord_y++) {
					XIo_Out16(XPAR_DDR2_SDRAM_MPMC_BASEADDR +
							((((int32_t)((int32_t)game.player_last_pos + player_coord_y + SCREEN_TOP_EDGE))*2560 + PLAYER_X_COORD + player_coord_x + SCREEN_LEFT_EDGE) << 1), WHITE);
				}
			}

			/*
			 * Draw the latest maze configuration.
			 */
			maze_index = game.maze_front;
			uint16_t track_color = rand() % 4096;
			for (posX = SCREEN_LEFT_EDGE; posX < SCREEN_RIGHT_EDGE; posX++) {
				XIo_Out16(XPAR_DDR2_SDRAM_MPMC_BASEADDR +
						((((uint32_t)(game.maze[maze_index].upper_bound + SCREEN_TOP_EDGE))*2560 + posX) << 1), track_color);
				XIo_Out16(XPAR_DDR2_SDRAM_MPMC_BASEADDR +
						((((uint32_t)(game.maze[maze_index].upper_bound - 1 + SCREEN_TOP_EDGE))*2560 + posX) << 1), track_color);
				XIo_Out16(XPAR_DDR2_SDRAM_MPMC_BASEADDR +
						((((uint32_t)(game.maze[maze_index].lower_bound + SCREEN_TOP_EDGE))*2560 + posX) << 1), track_color);
				XIo_Out16(XPAR_DDR2_SDRAM_MPMC_BASEADDR +
						((((uint32_t)(game.maze[maze_index].lower_bound + 1 + SCREEN_TOP_EDGE))*2560 + posX) << 1), track_color);

				maze_index = (maze_index + 1) % GRAPHIC_WIDTH;
			}

			/*
			 * Draw the player symbol.
			 */
			for (player_coord_x = -PLAYER_SYMBOL_RADIUS; player_coord_x <= PLAYER_SYMBOL_RADIUS; player_coord_x++) {
				for (player_coord_y = -PLAYER_SYMBOL_RADIUS; player_coord_y <= PLAYER_SYMBOL_RADIUS; player_coord_y++) {
					XIo_Out16(XPAR_DDR2_SDRAM_MPMC_BASEADDR +
							((((int32_t)((int32_t)game.player_pos + player_coord_y + SCREEN_TOP_EDGE))*2560 + PLAYER_X_COORD + player_coord_x + SCREEN_LEFT_EDGE) << 1), BLACK);
				}
			}

			while(XTmrCtr_GetValue(&timer, 0) < SCREEN_REFRESH_PERIOD) {}

			sprintf(message, "%d\n\r", game.maze_width);
			print(message);
		}

		/*
		 * Shade the player symbol red, indicating death.
		 */
		int player_coord_x, player_coord_y;
		for (player_coord_x = -PLAYER_SYMBOL_RADIUS; player_coord_x <= PLAYER_SYMBOL_RADIUS; player_coord_x++) {
			for (player_coord_y = -PLAYER_SYMBOL_RADIUS; player_coord_y <= PLAYER_SYMBOL_RADIUS; player_coord_y++) {
				XIo_Out16(XPAR_DDR2_SDRAM_MPMC_BASEADDR +
						((((int32_t)((int32_t)game.player_pos + player_coord_y + SCREEN_TOP_EDGE))*2560 + PLAYER_X_COORD + player_coord_x + SCREEN_LEFT_EDGE) << 1), RED);
			}
		}

		sprintf(message, "%s%d\n\r", "Game over! Your score was: ", game.score);
		print(message);
		sprintf(message, "%s\n\r", "To play again, please press the button...");
		print(message);

		while(!XGpio_DiscreteRead(&BUTTON, 1)) {}
	}

	/*
	while(1) {
		uint16_t read_in_a = XGpio_DiscreteRead(&ENC_SIG_A, 1);
		uint16_t read_in_b = XGpio_DiscreteRead(&ENC_SIG_B, 1);
		uint16_t button_state = XGpio_DiscreteRead(&BUTTON, 1);
		sprintf(string_text, "%s%d%s%d%s%d\n\r", "Displaying offset: ", read_in_a, ", ", read_in_b, ", ", button_state);
		print(string_text);
		sprintf(string_text, "%d\n\r", new_offset);
		print(string_text);
	}
	*/
	return 0;
}

void test_ih(void *InstancePtr) {
	XGpio *GpioPtr = (XGpio *) InstancePtr;
	XGpio_InterruptDisable(GpioPtr, XPAR_ENC_SIG_A_IP2INTC_IRPT_MASK);

	new_offset = (XGpio_DiscreteRead(&ENC_SIG_A, 1) == XGpio_DiscreteRead(&ENC_SIG_B, 1)) ?
			(new_offset + 1) : (new_offset - 2);

	int i = 0;
	for (; i < 1000; i++) {}

	(void)XGpio_InterruptClear(GpioPtr, XPAR_ENC_SIG_A_IP2INTC_IRPT_MASK);
	XGpio_InterruptEnable(GpioPtr, XPAR_ENC_SIG_A_IP2INTC_IRPT_MASK);
}

int SetupInterrupts() {
	XGpio_InterruptEnable(&ENC_SIG_A, XPAR_ENC_SIG_A_IP2INTC_IRPT_MASK);
	XGpio_InterruptGlobalEnable(&ENC_SIG_A);

	int Result;
	XIntc *IntcInstancePtr = &myIntc;

	Result = XIntc_Initialize(IntcInstancePtr, XPAR_INTC_0_DEVICE_ID);
	if (Result != XST_SUCCESS) {
		return Result;
	}

	Result = XIntc_Connect(IntcInstancePtr, XPAR_INTC_0_GPIO_1_VEC_ID,
			(Xil_ExceptionHandler)test_ih, &ENC_SIG_A);
	if (Result != XST_SUCCESS) {
			return Result;
	}

	Result = XIntc_Start(IntcInstancePtr, XIN_REAL_MODE);
	if (Result != XST_SUCCESS) {
		return Result;
	}

	XIntc_Enable(IntcInstancePtr, XPAR_INTC_0_GPIO_1_VEC_ID);

	Xil_ExceptionInit();

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler)XIntc_InterruptHandler, IntcInstancePtr);

	Xil_ExceptionEnable();

	return XST_SUCCESS;
}
