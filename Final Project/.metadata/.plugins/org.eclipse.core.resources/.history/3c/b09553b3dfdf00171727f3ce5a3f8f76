#include <stdbool.h>
#include <stdint.h>

#include "globals.h"
#include "maze_system.h"

#ifndef GAME_SYSTEM_H
#define GAME_SYSTEM_H

/**
 * A top-level game manager.
 */
typedef struct game {
	/**
	 * Whether or not the game has been initialized and is ready to be played.
	 */
	bool initialized;

	/**
	 * Whether or not the game is over and awaiting cleanup.
	 */
	bool game_over;

	/**
	 * The extent of the maze in memory, implemented as a ring buffer.
	 */
	COL_DEF maze[GRAPHIC_WIDTH];

	/**
	 * The index to the front of the maze.
	 */
	uint16_t maze_front;

	/**
	 * The index to the back of the maze.
	 */
	uint16_t maze_back;

	/**
	 * The current maze width.
	 */
	uint8_t maze_width;

	/**
	 * The current maze speed.
	 */
	uint8_t maze_speed;

	/**
	 * The player's current y-coordinate position.
	 */
	int16_t player_pos;

	/**
	 * The player's last y-coordinate position.
	 */
	int16_t player_last_pos;

	/**
	 * The current game score.
	 */
	uint32_t score;

} GAME;

/**
 * Initializes a new game.
 *
 * @param game The game to initialize.
 *
 * @return True for a successful initialization.
 */
bool initialize_game(GAME *game) {
	uint16_t i = 0;

	for (; i < GRAPHIC_WIDTH; i++) {
		game->maze[i].lower_bound = PLAYER_Y_START_COORD + START_WIDTH/2;
		game->maze[i].upper_bound = PLAYER_Y_START_COORD - START_WIDTH/2;
		game->maze[i].maze_direction = STRAIGHT;
	}

	game->maze_front = 0;
	game->maze_back = GRAPHIC_WIDTH - 1;

	game->maze_width = START_WIDTH;
	game->maze_speed = START_SPEED;

	game->player_pos = PLAYER_Y_START_COORD;

	game->game_over = false;

	game->initialized = true;

	return true;
}

/**
 * Propagates the game state forward by one step.
 *
 * @param game The game object to propagate.
 * @param A delta step representing how far the player's position should change.
 *        Positive values represent the player moving downwards.
 *
 * @return True if the game successfully propagated, false otherwise.
 */
bool propagate_game(GAME *game, uint16_t player_step) {

	/*
	 * Check that the game is initialized and that it's not over.
	 */
	if (!game->initialized || game->game_over) return false;

	/*
	 * On the score reaching a multiple of 1000, the speed and difficulty of the
	 * game should increase (but only if those settings haven't reached
	 * pre-defined maximums).
	 *
	 * Then, generate a new column for the maze.
	 */
	if (!game->score == 0 && game->score % 10 == 0) {
		if (game->maze_width > MIN_WIDTH) {
			game->maze_width--;
			game->maze[game->maze_front] = generate_col_def(game->maze[game->maze_back], -1);
		}
		else {
			game->maze[game->maze_front] = generate_col_def(game->maze[game->maze_back], 0);
		}
		if (game->maze_speed < MAX_SPEED) {
			game->maze_speed++;
		}
	}
	else {
		game->maze[game->maze_front] = generate_col_def(game->maze[game->maze_back], 0);
	}

	/*
	 * Increment the indices.
	 */
	game->maze_front = (game->maze_front + 1) % GRAPHIC_WIDTH;
	game->maze_back = (game->maze_back + 1) % GRAPHIC_WIDTH;

	/*
	 * Update the player vertical position.
	 */
	game->player_last_pos = game->player_pos;
	game->player_pos += player_step;

	/*
	 * Collision detection - clamp the player's position to the maze bounds.
	 */
	if (game->player_pos - PLAYER_SYMBOL_RADIUS < game->maze[(game->maze_front + PLAYER_X_COORD) % GRAPHIC_WIDTH].upper_bound) {
		game->player_pos = game->maze[(game->maze_front + PLAYER_X_COORD) % GRAPHIC_WIDTH].upper_bound + PLAYER_SYMBOL_RADIUS;
	}
	else if (game->player_pos + PLAYER_SYMBOL_RADIUS > game->maze[(game->maze_front + PLAYER_X_COORD) % GRAPHIC_WIDTH].lower_bound) {
		game->player_pos = game->maze[(game->maze_front + PLAYER_X_COORD) % GRAPHIC_WIDTH].lower_bound - PLAYER_SYMBOL_RADIUS;
	}

	/*
	 * Check if the player is dead.
	 *
	 * We can probably combine this with the collision detection logic above.
	 * They're just split right now for testing purposes.
	 */
	if (game->player_pos - PLAYER_SYMBOL_RADIUS <= game->maze[(game->maze_front + PLAYER_X_COORD) % GRAPHIC_WIDTH].upper_bound ||
		game->player_pos + PLAYER_SYMBOL_RADIUS >= game->maze[(game->maze_front + PLAYER_X_COORD) % GRAPHIC_WIDTH].lower_bound) {
		game->game_over = true;
	}

	/*
	 * Increment game score by 1.
	 */
	game->score++;

	return true;
}

#endif
